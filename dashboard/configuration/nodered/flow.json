[
    {
        "id": "74429ff4.4ff848",
        "type": "tab",
        "label": "Collect Gateways",
        "disabled": false,
        "info": ""
    },
    {
        "id": "176e4c9f.1fe43b",
        "type": "tab",
        "label": "Collect Devices",
        "disabled": true,
        "info": ""
    },
    {
        "id": "8c90c3c0.3ed818",
        "type": "tab",
        "label": "Status Error",
        "disabled": true,
        "info": ""
    },
    {
        "id": "b23a6a86.69b218",
        "type": "tab",
        "label": "Payloard Codec",
        "disabled": true,
        "info": ""
    },
    {
        "id": "8ef8462d.3e5728",
        "type": "tab",
        "label": "Save Data",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f75893bf.fe0438",
        "type": "mqtt-broker",
        "name": "campusiot",
        "broker": "lns.campusiot.imag.fr",
        "port": "8883",
        "tls": "e038e18.c53e52",
        "clientid": "",
        "usetls": true,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "e038e18.c53e52",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false
    },
    {
        "id": "70b21447.a18194",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "lorawan",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "a807d74e.60fa88",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "ca.crt",
        "verifyservercert": true
    },
    {
        "id": "c394074f.57539",
        "type": "debug",
        "z": "8ef8462d.3e5728",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "payload",
        "x": 910,
        "y": 380,
        "wires": []
    },
    {
        "id": "df40f84.4bd5288",
        "type": "inject",
        "z": "8ef8462d.3e5728",
        "name": "DROP all",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 364,
        "wires": [
            [
                "b55d68bc.514e7",
                "de6ceda5.ce4768",
                "e75b1a57.d9b12",
                "36809190.0fa4a6",
                "19af70ce.736257",
                "d5d3b1cc.758b08"
            ]
        ]
    },
    {
        "id": "81b74405.f01f58",
        "type": "comment",
        "z": "8ef8462d.3e5728",
        "name": "Reset series by clicking on the node",
        "info": "",
        "x": 240,
        "y": 260,
        "wires": []
    },
    {
        "id": "b55d68bc.514e7",
        "type": "influxdb in",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "DROP radio",
        "query": "DROP MEASUREMENT radio",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 510,
        "y": 280,
        "wires": [
            [
                "c394074f.57539"
            ]
        ]
    },
    {
        "id": "de6ceda5.ce4768",
        "type": "influxdb in",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "DROP data",
        "query": "DROP MEASUREMENT data",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 510,
        "y": 324,
        "wires": [
            [
                "c394074f.57539"
            ]
        ]
    },
    {
        "id": "e75b1a57.d9b12",
        "type": "influxdb in",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "DROP rx",
        "query": "DROP MEASUREMENT rx",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 500,
        "y": 364,
        "wires": [
            [
                "c394074f.57539"
            ]
        ]
    },
    {
        "id": "523e40e9.b6ef48",
        "type": "influxdb out",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "radio",
        "measurement": "radio",
        "precision": "",
        "retentionPolicy": "",
        "x": 690,
        "y": 560,
        "wires": []
    },
    {
        "id": "af88da4d.7c7cd",
        "type": "influxdb out",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "rawdata",
        "measurement": "application",
        "precision": "",
        "retentionPolicy": "",
        "x": 700,
        "y": 880,
        "wires": []
    },
    {
        "id": "2a85e3e5.706ea4",
        "type": "influxdb out",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "rx",
        "measurement": "rx",
        "precision": "",
        "retentionPolicy": "",
        "x": 690,
        "y": 680,
        "wires": []
    },
    {
        "id": "5e7f86a1.457188",
        "type": "link in",
        "z": "8ef8462d.3e5728",
        "name": "gatewayrx2point",
        "links": [
            "46436c8c.a31834",
            "24df3277.6cb4ee"
        ],
        "x": 175,
        "y": 680,
        "wires": [
            [
                "5f8ee0a3.885e28"
            ]
        ]
    },
    {
        "id": "833669c2.795cb8",
        "type": "link in",
        "z": "8ef8462d.3e5728",
        "name": "object2point",
        "links": [
            "7a55726d.c3aeac",
            "9a08d558.62e1f",
            "c141f835.7a33d8",
            "c5bc3503.79869",
            "8ae1cee1.8a65e8",
            "dc4b7855.5f747",
            "97bd28ab.859f88"
        ],
        "x": 175,
        "y": 820,
        "wires": [
            [
                "d3f5d430.bbe4b"
            ]
        ]
    },
    {
        "id": "4d054fa6.b2656",
        "type": "file",
        "z": "8ef8462d.3e5728",
        "name": "Append in logfile.txt",
        "filename": "/data/logfile.txt",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "x": 700,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "e15cc6f7.169",
        "type": "function",
        "z": "8ef8462d.3e5728",
        "name": "Convert radio in point",
        "func": "var p = msg.payload;\nvar r = msg.payload.radio;\n\nvar deveui = p.devEUI;\nvar size = r.size;\n//var toa = r.toa;\n//var X_operator = r.X_operator;\n\nvar points = [];\n\n    var point = [{\n        // add time\n        rssi: r.rssi,\n        lsnr: r.loRaSNR,\n        size: p.size,\n        dr: r.dr,\n        redundancy: r.redundancy\n    },\n    {\n        deveui: p.devEUI,\n        deviceName: p.deviceName,\n        gatewayID: r.gatewayID,\n        datarate: r.dr,\n        appid: p.applicationID,\n        frequency: r.frequency/1000000.0,\n        region: \"eu868\",\n        subband: r.subband\n    }];\n\n    points.push(point);\n\nmsg.payload = points;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 560,
        "wires": [
            [
                "523e40e9.b6ef48",
                "c39f6380.8cc0d"
            ]
        ]
    },
    {
        "id": "69db27cf.f9d1d8",
        "type": "link in",
        "z": "8ef8462d.3e5728",
        "name": "radio2point",
        "links": [
            "16cc577e.d91489",
            "5a91beaa.681d28"
        ],
        "x": 175,
        "y": 560,
        "wires": [
            [
                "e15cc6f7.169"
            ]
        ]
    },
    {
        "id": "87080696.c87eb",
        "type": "inject",
        "z": "8ef8462d.3e5728",
        "name": "CREATE DATABASE lorawan",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 120,
        "wires": [
            [
                "28a766a8.7a1002"
            ]
        ]
    },
    {
        "id": "fe1c2f1a.8d093",
        "type": "comment",
        "z": "8ef8462d.3e5728",
        "name": "Create the database by clicking on the node",
        "info": "",
        "x": 270,
        "y": 80,
        "wires": []
    },
    {
        "id": "28a766a8.7a1002",
        "type": "influxdb in",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "CREATE DATABASE lorawan",
        "query": "CREATE DATABASE \"lorawan\" WITH DURATION 60d REPLICATION 1 SHARD DURATION 1h NAME \"sixty_days\"",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 560,
        "y": 120,
        "wires": [
            [
                "b829fa16.a0768"
            ]
        ]
    },
    {
        "id": "b829fa16.a0768",
        "type": "debug",
        "z": "8ef8462d.3e5728",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 910,
        "y": 120,
        "wires": []
    },
    {
        "id": "b23a180e.9ebe18",
        "type": "inject",
        "z": "8ef8462d.3e5728",
        "name": "DROP DATABASE lorawan",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 197,
        "wires": [
            [
                "ff008771.e0032"
            ]
        ]
    },
    {
        "id": "ff008771.e0032",
        "type": "influxdb in",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "DROP DATABASE lorawan",
        "query": "DROP DATABASE \"lorawan\"",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 560,
        "y": 197,
        "wires": [
            [
                "46b54aaf.b964cc"
            ]
        ]
    },
    {
        "id": "46b54aaf.b964cc",
        "type": "debug",
        "z": "8ef8462d.3e5728",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 910,
        "y": 197,
        "wires": []
    },
    {
        "id": "26bb9b.c5eea466",
        "type": "comment",
        "z": "8ef8462d.3e5728",
        "name": "Drop the database by clicking on the node",
        "info": "",
        "x": 260,
        "y": 160,
        "wires": []
    },
    {
        "id": "27a7d2a5.b405a6",
        "type": "link in",
        "z": "b23a6a86.69b218",
        "name": "",
        "links": [
            "16cc577e.d91489",
            "5a91beaa.681d28"
        ],
        "x": 195,
        "y": 220,
        "wires": [
            [
                "70a5a5f2.183e34",
                "cf4442ba.bf396",
                "9613b1c.90b5ed"
            ]
        ]
    },
    {
        "id": "70a5a5f2.183e34",
        "type": "function",
        "z": "b23a6a86.69b218",
        "name": "Filter decoded then convert data",
        "func": "if(msg.payload.object) {\n    return undefined;\n} else {\n    if(msg.payload.data){\n        msg.payload.data = Buffer.from(msg.payload.data, 'base64');\n        return msg;\n    } else {\n        return msg;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 220,
        "wires": [
            [
                "b7a128b1.2adae"
            ]
        ]
    },
    {
        "id": "975ef738.66ae08",
        "type": "link out",
        "z": "b23a6a86.69b218",
        "name": "geoloc_device",
        "links": [
            "590961be.974788"
        ],
        "x": 995,
        "y": 80,
        "wires": []
    },
    {
        "id": "5f8ee0a3.885e28",
        "type": "function",
        "z": "8ef8462d.3e5728",
        "name": "Convert rx in point",
        "func": "var p = msg.payload;\n\nvar phyPayloadBuffer = p.phyPayloadBuffer;\n\nvar rxInfo = p.rxInfo;\nvar txInfo = p.txInfo;\n\nvar point = [{\n    // TODO add time\n    size: phyPayloadBuffer.length,\n    rssi: rxInfo.rssi,\n    lsnr: rxInfo.loRaSNR,\n    toa: rxInfo.toa\n},\n{\n    mac: rxInfo.gatewayID,\n    frametype: p.frametype,\n    operator: p.operator,\n    frequency: txInfo.frequency,\n    dr: rxInfo.dr,\n    redundancy: rxInfo.redundancy,\n    subband: rxInfo.subband,\n    sf: txInfo.loRaModulationInfo.spreadingFactor,\n    bw: txInfo.loRaModulationInfo.bandwidth\n}];\n\nif (p.devaddr) {\n    point[1].devaddr = p.devaddr;\n    point[1].operator = p.operator;\n    point[1].confirmed = p.confirmed;\n\n    msg.payload = point;\n    return msg;\n    \n} else if (p.deveui) {\n    point[1].deveui = p.deveui;\n    point[1].appeui = p.appeui;\n\n    msg.payload = point;\n    return msg;\n\n} else {\n    return undefined;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 680,
        "wires": [
            [
                "2a85e3e5.706ea4",
                "332fc1a7.e06e1e"
            ]
        ]
    },
    {
        "id": "a519db65.4d21b8",
        "type": "influxdb out",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "data",
        "measurement": "data",
        "precision": "ms",
        "retentionPolicy": "",
        "x": 690,
        "y": 820,
        "wires": []
    },
    {
        "id": "7ee603e8.d44f24",
        "type": "influxdb out",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "tx",
        "measurement": "tx",
        "precision": "",
        "retentionPolicy": "",
        "x": 690,
        "y": 740,
        "wires": []
    },
    {
        "id": "f821fb9e.713c38",
        "type": "function",
        "z": "8ef8462d.3e5728",
        "name": "Convert tx in point",
        "func": "var p = msg.payload;\n\nvar txInfo = p.txInfo;\nvar point = [{\n    size: txInfo.size,\n    toa: txInfo.toa,\n    power: txInfo.power\n},\n{\n    mac: txInfo.mac,\n    frequency: txInfo.frequency,\n    subband: txInfo.subband,\n    sf: txInfo.dataRate.spreadFactor,\n    bw: txInfo.dataRate.bandwidth,\n    dr: txInfo.dr\n}];\n\nmsg.payload = point;\nreturn msg;\n    \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 430,
        "y": 740,
        "wires": [
            [
                "7ee603e8.d44f24",
                "55964523.ab106c"
            ]
        ]
    },
    {
        "id": "9407cfb0.3e17b8",
        "type": "link in",
        "z": "8ef8462d.3e5728",
        "name": "gatewaytx2point",
        "links": [
            "b8435984.1c1a1",
            "4abf3eef.0a6388"
        ],
        "x": 175,
        "y": 740,
        "wires": [
            [
                "f821fb9e.713c38"
            ]
        ]
    },
    {
        "id": "36809190.0fa4a6",
        "type": "influxdb in",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "DROP tx",
        "query": "DROP MEASUREMENT tx",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 500,
        "y": 403,
        "wires": [
            [
                "c394074f.57539"
            ]
        ]
    },
    {
        "id": "55964523.ab106c",
        "type": "debug",
        "z": "8ef8462d.3e5728",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 850,
        "y": 760,
        "wires": []
    },
    {
        "id": "332fc1a7.e06e1e",
        "type": "debug",
        "z": "8ef8462d.3e5728",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 850,
        "y": 700,
        "wires": []
    },
    {
        "id": "d3f5d430.bbe4b",
        "type": "function",
        "z": "8ef8462d.3e5728",
        "name": "Convert points/object in influxdb point",
        "func": "var p = msg.payload;\n\nvar r = p.radio;\n\nvar res = [];\n\nvar points = p.points;\n\nif(points) {\n    var i;\n    for(i=0; i < points.length; i++){\n        \n        var point = points[i];\n        // add radio metadata\n        point.rssi = r.rssi;\n        point.lsnr = r.loRaSNR;\n        point.dr = r.dr;\n        point.redundancy = r.redundancy;\n        point.fCnt = p.fCnt;\n\n        var pt =\n            [\n                point,\n                {\n                    devEUI: p.devEUI,\n                    applicationID: p.applicationID,\n                    deviceName: p.deviceName,\n                    applicationName: p.applicationName\n                }\n            ];\n        res.push(pt);\n    }\n    return res;\n} else {\n    var o = p.object;\n    if(o) {\n        if(Array.isArray(o)) {\n            o.forEach(function(e) {\n            // add timestamp  \n            e.object.time = e.timestamp;\n            // add radio metadata\n            e.object.rssi = r.rssi;\n            e.object.lsnr = r.loRaSNR;\n            e.object.dr = r.dr;\n            e.object.redundancy = r.redundancy;\n            e.object.fCnt = p.fCnt;\n\n\n            var point = [\n                e.object,\n                {\n                    devEUI: p.devEUI,\n                    applicationID: p.applicationID,\n                    deviceName: p.deviceName,\n                    applicationName: p.applicationName\n                }\n            ];\n            res.push(point)\n            });\n        } else {\n            if(o.series) {\n                o.series.forEach(function(s) {\n                    var timeShift = s._timeShift; // time shift in seconds\n                    delete s._timeShift;\n                    s.time = p.time + timeShift*1000;\n                    \n                    // add radio metadata\n                    s.rssi = r.rssi;\n                    s.lsnr = r.loRaSNR;\n                    s.dr = r.dr;\n                    s.redundancy = r.redundancy;\n                    s.fCnt = p.fCnt;\n\n                    var ptd = [\n                        s,\n                        {\n                            devEUI: p.devEUI,\n                            applicationID: p.applicationID,\n                            deviceName: p.deviceName,\n                            applicationName: p.applicationName\n                        }\n                    ];                    \n                    res.push(ptd)\n                });\n            } else {\n                // add radio metadata\n                o.rssi = r.rssi;\n                o.lsnr = r.loRaSNR;\n                o.dr = r.dr;\n                o.redundancy = r.redundancy;\n                o.fCnt = p.fCnt;\n    \n                var ptd = [\n                    o,\n                    {\n                        devEUI: p.devEUI,\n                        applicationID: p.applicationID,\n                        deviceName: p.deviceName,\n                        applicationName: p.applicationName\n                    }\n                ];\n                res.push(ptd)\n            }\n        }\n        msg.payload = res;\n        return msg;\n    } else {\n        return undefined;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 820,
        "wires": [
            [
                "a519db65.4d21b8",
                "ac55a2d4.829ab"
            ]
        ]
    },
    {
        "id": "ac55a2d4.829ab",
        "type": "debug",
        "z": "8ef8462d.3e5728",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 850,
        "y": 860,
        "wires": []
    },
    {
        "id": "b7a128b1.2adae",
        "type": "function",
        "z": "b23a6a86.69b218",
        "name": "filter message with position",
        "func": "var p = msg.payload;\nvar o = p.object;\nif(o){\n    if(o.latitude && o.longitude) {\n        return msg;\n    } else if(o.lat && o.lng) {\n        return msg;\n    }\n}\nreturn undefined;    \n",
        "outputs": 1,
        "noerr": 0,
        "x": 720,
        "y": 80,
        "wires": [
            [
                "975ef738.66ae08"
            ]
        ]
    },
    {
        "id": "cf4442ba.bf396",
        "type": "debug",
        "z": "b23a6a86.69b218",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 390,
        "y": 120,
        "wires": []
    },
    {
        "id": "1928da62.e77bce",
        "type": "influxdb out",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "stat",
        "measurement": "stat",
        "precision": "",
        "retentionPolicy": "",
        "x": 690,
        "y": 620,
        "wires": []
    },
    {
        "id": "4b00e4e3.78ac9c",
        "type": "link in",
        "z": "8ef8462d.3e5728",
        "name": "stat2point",
        "links": [
            "ad6b127f.b7f52",
            "923b95c6.16bb7",
            "52791c0a.5295c4"
        ],
        "x": 175,
        "y": 620,
        "wires": [
            [
                "82389b4c.04829"
            ]
        ]
    },
    {
        "id": "82389b4c.04829",
        "type": "function",
        "z": "8ef8462d.3e5728",
        "name": "Convert stat in point",
        "func": "var p = msg.payload;\nvar t = msg.topic;\n\nvar mac = (Buffer.from(p.gatewayID,\"base64\")).toString('hex');\n\nvar point = [{\n    // TODO add time\n    rxPacketsReceived: p.rxPacketsReceived,\n    rxPacketsReceivedOK: p.rxPacketsReceivedOK,\n    txPacketsReceived: p.txPacketsReceived,\n    txPacketsEmitted: p.txPacketsEmitted\n},\n{\n    mac: mac\n}];\n\nvar l = p.location;\nif(l && (l !== null)) {\n    if(l.latitude) point[0].latitude = l.latitude;\n    if(l.longitude) point[0].longitude = l.longitude;\n    if(l.altitude) point[0].altitude = l.altitude;\n    if(l.accuracy) point[0].accuracy = l.accuracy;\n}\n\nmsg.payload = point;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 440,
        "y": 620,
        "wires": [
            [
                "1928da62.e77bce",
                "147194d1.151e53"
            ]
        ]
    },
    {
        "id": "19af70ce.736257",
        "type": "influxdb in",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "DROP stat",
        "query": "DROP MEASUREMENT stat",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 510,
        "y": 440,
        "wires": [
            [
                "c394074f.57539"
            ]
        ]
    },
    {
        "id": "147194d1.151e53",
        "type": "debug",
        "z": "8ef8462d.3e5728",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 890,
        "y": 580,
        "wires": []
    },
    {
        "id": "c39f6380.8cc0d",
        "type": "debug",
        "z": "8ef8462d.3e5728",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 890,
        "y": 520,
        "wires": []
    },
    {
        "id": "9613b1c.90b5ed",
        "type": "function",
        "z": "b23a6a86.69b218",
        "name": "Filter undecoded",
        "func": "if(msg.payload.object) {\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 429,
        "y": 180,
        "wires": [
            [
                "97bd28ab.859f88",
                "b7a128b1.2adae"
            ]
        ]
    },
    {
        "id": "97bd28ab.859f88",
        "type": "link out",
        "z": "b23a6a86.69b218",
        "name": "undecoded",
        "links": [
            "833669c2.795cb8"
        ],
        "x": 975,
        "y": 180,
        "wires": []
    },
    {
        "id": "ccf797c9.5cbf",
        "type": "influxdb out",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "status",
        "measurement": "status",
        "precision": "ms",
        "retentionPolicy": "",
        "x": 690,
        "y": 960,
        "wires": []
    },
    {
        "id": "ff0afa6c.f02548",
        "type": "link in",
        "z": "8ef8462d.3e5728",
        "name": "status2point",
        "links": [
            "90ab080e.f6c338",
            "909ee694.8a1608"
        ],
        "x": 175,
        "y": 960,
        "wires": [
            [
                "7413bf4a.ecb5a"
            ]
        ]
    },
    {
        "id": "7413bf4a.ecb5a",
        "type": "function",
        "z": "8ef8462d.3e5728",
        "name": "Convert status in influxdb point",
        "func": "var p = msg.payload;\nvar pt =    [\n                {\n                    // TODO add time\n                   margin:p.margin,\n                   battery: p.battery,\n                   externalPowerSource: p.externalPowerSource ? 1 : 0,\n                   batteryLevel: p.batteryLevel,\n                   batteryLevelUnavailable: p.batteryLevelUnavailable ? 1 : 0\n                },\n                {\n                    devEUI: p.devEUI,\n                    applicationID: p.applicationID,\n                    deviceName: p.deviceName,\n                    applicationName: p.applicationName\n                }\n            ];\nmsg.payload = pt;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 960,
        "wires": [
            [
                "ccf797c9.5cbf",
                "21a97a3.d4c4306"
            ]
        ]
    },
    {
        "id": "d5d3b1cc.758b08",
        "type": "influxdb in",
        "z": "8ef8462d.3e5728",
        "influxdb": "70b21447.a18194",
        "name": "DROP status",
        "query": "DROP MEASUREMENT status",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 510,
        "y": 480,
        "wires": [
            [
                "c394074f.57539"
            ]
        ]
    },
    {
        "id": "21a97a3.d4c4306",
        "type": "debug",
        "z": "8ef8462d.3e5728",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 850,
        "y": 980,
        "wires": []
    },
    {
        "id": "aa2e2309.8ab36",
        "type": "mqtt in",
        "z": "8c90c3c0.3ed818",
        "name": "Application Ack",
        "topic": "application/+/device/+/ack",
        "qos": "2",
        "datatype": "auto",
        "broker": "f75893bf.fe0438",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "7d2e9592.a674ec"
            ]
        ]
    },
    {
        "id": "589f1a6d.6f11c4",
        "type": "mqtt in",
        "z": "8c90c3c0.3ed818",
        "name": "Application Error",
        "topic": "application/+/device/+/error",
        "qos": "2",
        "datatype": "auto",
        "broker": "f75893bf.fe0438",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "7d2e9592.a674ec"
            ]
        ]
    },
    {
        "id": "2b3dcb7a.888934",
        "type": "debug",
        "z": "8c90c3c0.3ed818",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "7d2e9592.a674ec",
        "type": "json",
        "z": "8c90c3c0.3ed818",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 100,
        "wires": [
            [
                "2b3dcb7a.888934"
            ]
        ]
    },
    {
        "id": "e8248b66.2aed1",
        "type": "json",
        "z": "8c90c3c0.3ed818",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 160,
        "wires": [
            [
                "22c5ca9b.ee0dc6"
            ]
        ]
    },
    {
        "id": "22c5ca9b.ee0dc6",
        "type": "function",
        "z": "8c90c3c0.3ed818",
        "name": "add now",
        "func": "\nmsg.payload.time = new Date().getTime();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 160,
        "wires": [
            [
                "ff1ba348.c5d438",
                "909ee694.8a1608"
            ]
        ]
    },
    {
        "id": "ff1ba348.c5d438",
        "type": "debug",
        "z": "8c90c3c0.3ed818",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 930,
        "y": 100,
        "wires": []
    },
    {
        "id": "909ee694.8a1608",
        "type": "link out",
        "z": "8c90c3c0.3ed818",
        "name": "status",
        "links": [
            "ff0afa6c.f02548"
        ],
        "x": 875,
        "y": 160,
        "wires": []
    },
    {
        "id": "60770530.d61afc",
        "type": "mqtt in",
        "z": "8c90c3c0.3ed818",
        "name": "Application Status *",
        "topic": "application/+/device/+/status",
        "qos": "2",
        "datatype": "auto",
        "broker": "f75893bf.fe0438",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "e8248b66.2aed1"
            ]
        ]
    },
    {
        "id": "73a47132.43aad",
        "type": "debug",
        "z": "74429ff4.4ff848",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1190,
        "y": 400,
        "wires": []
    },
    {
        "id": "c3f0b02e.832b08",
        "type": "mqtt in",
        "z": "74429ff4.4ff848",
        "name": "Gateway Stat +",
        "topic": "gateway/+/event/stats",
        "qos": "2",
        "datatype": "auto",
        "broker": "f75893bf.fe0438",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "e607c87.2630938"
            ]
        ]
    },
    {
        "id": "e607c87.2630938",
        "type": "json",
        "z": "74429ff4.4ff848",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 370,
        "y": 80,
        "wires": [
            [
                "52791c0a.5295c4",
                "3f8562e8.600c5e"
            ]
        ]
    },
    {
        "id": "52791c0a.5295c4",
        "type": "link out",
        "z": "74429ff4.4ff848",
        "name": "gateway",
        "links": [
            "4b00e4e3.78ac9c"
        ],
        "x": 1135,
        "y": 80,
        "wires": []
    },
    {
        "id": "3f8562e8.600c5e",
        "type": "debug",
        "z": "74429ff4.4ff848",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 160,
        "wires": []
    },
    {
        "id": "b06420c9.a43ef",
        "type": "mqtt in",
        "z": "74429ff4.4ff848",
        "name": "Gateway Up +",
        "topic": "gateway/+/event/up",
        "qos": "2",
        "datatype": "auto",
        "broker": "f75893bf.fe0438",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "3991c42c.3a3bac"
            ]
        ]
    },
    {
        "id": "3991c42c.3a3bac",
        "type": "json",
        "z": "74429ff4.4ff848",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "9ce4514d.9e1ec"
            ]
        ]
    },
    {
        "id": "24df3277.6cb4ee",
        "type": "link out",
        "z": "74429ff4.4ff848",
        "name": "gateway",
        "links": [
            "5e7f86a1.457188"
        ],
        "x": 1135,
        "y": 240,
        "wires": []
    },
    {
        "id": "9ce4514d.9e1ec",
        "type": "function",
        "z": "74429ff4.4ff848",
        "name": "convert frame payload",
        "func": "var p = msg.payload;\n\nif(p.phyPayload){\n    msg.payload.phyPayloadBuffer = Buffer.from(p.phyPayload, 'base64');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 240,
        "wires": [
            [
                "82d1b4b3.7373c8"
            ]
        ]
    },
    {
        "id": "82d1b4b3.7373c8",
        "type": "function",
        "z": "74429ff4.4ff848",
        "name": "decode lorawan up frame",
        "func": "var TimeOnAir = {\n    /**\n     * get the time on air in ms for a LoRaWAN data frame\n     *\n     * @param {number} payloadLen\n     * the applicative payload len (include port)\n     * @param {number} optionsLen\n     * the options len\n     * @param {number} lorawanDataRate\n     * (0 to 6. 7 is not implemented)\n     * @return\n     * @return {number}\n     */\n    getLoRaWANTimeOnAir : function (payloadLen, optionsLen, lorawanDataRate) {\n        if (((typeof payloadLen === 'number') || payloadLen === null) && ((typeof optionsLen === 'number') || optionsLen === null) && ((typeof lorawanDataRate === 'number') || lorawanDataRate === null)) {\n            return TimeOnAir.getLoRaWANTimeOnAir$int$int$int(payloadLen, optionsLen, lorawanDataRate);\n        }\n        else if (((typeof payloadLen === 'number') || payloadLen === null) && ((typeof optionsLen === 'number') || optionsLen === null) && lorawanDataRate === undefined) {\n            return TimeOnAir.getLoRaWANTimeOnAir$int$int(payloadLen, optionsLen);\n        }\n        else\n            throw new Error('invalid overload');\n    },\n    getLoRaWANTimeOnAir$int$int$int : function (payloadLen, optionsLen, lorawanDataRate) {\n        return TimeOnAir.getLoRaWANTimeOnAir$int$int(13 + payloadLen + optionsLen, lorawanDataRate);\n    },\n    getLoRaWANTimeOnAir$int$int : function (frameLen, lorawanDataRate) {\n        if (lorawanDataRate === 7) {\n            return TimeOnAir.getFSKTimeOnAir(frameLen, 50000);\n        }\n        else {\n            var bandwidth = lorawanDataRate < 6 ? 125000 : 250000;\n            var sf = lorawanDataRate === 6 ? 7 : 12 - lorawanDataRate;\n            var lowDatarateOptimize = lorawanDataRate < 2 ? true : false;\n            var coderate = 5;\n            var header = true;\n            return TimeOnAir.getLoRaTimeOnAir(frameLen, 8, bandwidth, sf, lowDatarateOptimize, header, coderate);\n        }\n    },\n    /**\n     * get the time on air in ms for a LoRa packet\n     *\n     * @param {number} pktLen\n     * should include 13 bytes LoRaWAN header and the application\n     * payload\n     * @param {number} preambleLen\n     * 8 in LoRaWAN\n     * @param {number} bandwidth\n     * 125000, 250000, 500000\n     * @param {number} SF\n     * Spreading Factor (between 7 and 12)\n     * @param {boolean} header\n     * true if the frame includes a header\n     * @param {boolean} lowDatarateOptimize\n     * : the low data rate optimization bit is used. Specifically for\n     * 125 kHz bandwidth and SF = 11 and 12, this adds a small\n     * overhead to increase robustness to reference frequency\n     * variations over the timescale of the LoRa packet.\n     * @param {number} coderate\n     * between 5 and 8 (4/5 and 4/8) 5 in LoRaWAN\n     * @return {number} the time on air\n     * @private\n     */\n    /*private*/ getLoRaTimeOnAir : function (pktLen, preambleLen, bandwidth, SF, lowDatarateOptimize, header, coderate) {\n        var rs = bandwidth / (1 << SF);\n        var ts = 1 / rs;\n        var tPreamble = (preambleLen + 4.25) * ts;\n        var ce = Math.ceil((((8 * pktLen) - (4 * SF) + 28 + 16 - (header ? 20 : 0)) / (4 * (SF - (lowDatarateOptimize ? 2 : 0))))) * (coderate);\n        var nPayload = 8 + ((ce > 0) ? ce : 0);\n        var tPayload = nPayload * ts;\n        var tOnAir = tPreamble + tPayload;\n        var airTime = Math.floor(tOnAir * 1000 + 0.999);\n        return airTime;\n    },\n    /**\n     * get the time on air in ms for a FSK packet\n     * @param {number} pktLen\n     * @param {number} bitrate\n     * @return {number}\n     * @private\n     */\n    getFSKTimeOnAir : function (pktLen, bitrate) {\n        var airTime = ((pktLen + 5 + 3 + 1 + 2) * 8) * 1000 / bitrate;\n        return airTime;\n    }\n};\n\n\nfunction getLoRaWANDatarate(txInfo){\n  if(txInfo.modulation === \"LORA\") {\n    if(txInfo.loRaModulationInfo.bandwidth === 125) {\n      switch(txInfo.loRaModulationInfo.spreadingFactor) {\n        case 12: return 0;\n        case 11: return 1;\n        case 10: return 2;\n        case 9: return 3;\n        case 8: return 4;\n        case 7: return 5;\n        default: return undefined;\n      }\n    } else if(txInfo.loRaModulationInfo.bandwidth === 250 && txInfo.loRaModulationInfo.spreadingFactor === 7) {\n      return 6;\n    }\n  } else if(txInfo.modulation === \"FSK\") {\n    return 7;\n  }\n  return undefined;\n}\n\nfunction getLoRaWANDatarate_bak(dataRate){\n  if(dataRate.modulation === \"LORA\") {\n    if(dataRate.bandwidth === 125) {\n      switch(dataRate.spreadFactor) {\n        case 12: return 0;\n        case 11: return 1;\n        case 10: return 2;\n        case 9: return 3;\n        case 8: return 4;\n        case 7: return 5;\n        default: return undefined;\n      }\n    } else if(dataRate.bandwidth === 250 && dataRate.spreadFactor === 7) {\n      return 6;\n    }\n  } if(dataRate.modulation === \"FSK\") {\n    return 7;\n  }\n  return undefined;\n}\n\n\nfunction getSubBandsEU868(frequency) {\n    if(frequency>=863000000 && frequency<868000000) {\n        return \"g\";\n    } else if(frequency>=868000000 && frequency<868600000) {\n        return \"g1\";\n    } else if(frequency>=868700000 && frequency<869200000) {\n        return \"g2\";\n    } else if(frequency>=869400000 && frequency<869650000) {\n        return \"g3\";\n    } else if(frequency>=869700000 && frequency<870000000) {\n        return \"g4\";\n    } else {\n        return undefined;\n    }\n    /* Duty Cycle */\n    /*\n    g (863.0 – 868.0 MHz): 1%\n    g1 (868.0 – 868.6 MHz): 1%\n    g2 (868.7 – 869.2 MHz): 0.1%\n    g3 (869.4 – 869.65 MHz): 10%\n    g4 (869.7 – 870.0 MHz): 1%\n    */\n}\n// ============================\n// LoRaWAN Operators\n// ============================\n\n// https://www.thethingsnetwork.org/wiki/LoRaWAN/Address-Space#address-space-in-lorawan_devices_prefix-assignments\n\n// See LoRaWAN Backend Interfaces v1.0, Section 13: DevAddr Assignment\n\n// There are different types of NetIDs (Types 0 through 7), which differ based on the size of end-device address spacethey support (see LoRaWAN™ Backend Interfaces v1.0 for details). Sponsor members are granted one Type 0 and one Type 3 NetID, contributor members are grantedone Type 3and one Type 6 NetID, and adopter and institutional members are granted one Type 6 NetID.Unused NetID types (Types 1, 2, 4, 5, 7) are reserved for futureuse. They may be used when the currently assigned types are fully consumedor NwkIDs generated fromNetIDs start to collide.\n\n\n// NetID Type 0, Type Prefix Length (MSB) = 1, Type Prefix Value (binary) = 0b, Number of NwkID bits = 6, Number of NwkAddr bits = 25\n// @ 20201105\n\nconst operators_0 = {\n  0x0:['Local','Experimental'],\n  0x2:['Local','Experimental2'],\n  0x4:['World','Actility'],\n  0x6:['Europe','Proximus'],\n\n  0x8:['Europe','Swisscom'],\n  0xa:['Singapore, Indonesia , Australia, Africa , India','SingTel'],\n  0xc:['Europe','La Poste'],\n  0xe:['Europe','Bouygues Telecom'],\n\n  0x10:['World','Orbiwise'],\n  0x12:['U.S','SENET'],\n  0x14:['Europe','KPN'],\n  0x16:['Russia','EveryNet'],\n\n  0x18:['Africa','FastNet'],\n  0x1a:['World','SK Telecom'],\n  0x1c:['World','SagemCom'],\n  0x1e:['Europe','Orange France'],\n\n  0x20:['Italy','A2A Smart City'],\n  0x22:['India, Sri Lanka, Nepal, Bangladesh and the Maldives Islands','TATA Communication'],\n  0x24:['World','Kerlink'],\n  0x26:['World','The Things Network'],\n\n  0x28:['Germany, Switzerland, China','DIGIMONDO GmbH'],\n  0x2a:['World','Cisco Systems'],\n  0x2c:['China','Computer Network Information Center & Chinese of Sciences Guangzhou Sub-center (CNIC)'],\n  0x2e:['World','MultiTech Systems'],\n\n  0x30:['World','Loriot'],\n  0x32:['World','NNNCo'],\n  0x34:['World','Flashnet'],\n  0x36:['World','TrackNet'],\n\n  0x38:['World','Lar.Tech'],\n  0x3a:['World','Swiss Led'],\n  0x3c:['CIS, Europe','Net868'],\n  0x3e:['Italy','Axatel'],\n\n  0x40:['Germany','Telent (Netzikon)'],\n  0x42:['World','Patavina Technologies'],\n  0x44:['North America','Comcast'],\n  0x46:['Australia, New Zealand','Ventia'],\n\n  0x48:['World','Gimasi'],\n  0x4a:['World','Talkpool'],\n  0x4c:['UNASSIGNED','UNASSIGNED (previously Telemar)'],\n  0x4e:['World','MCF88 SRL'],\n\n  0x50:['Malaysia','VADSLYFE'],\n  0x52:['World','Gemtek'],\n  0x54:['World','M2B Communications'],\n  0x56:['China','ZTE'],\n\n  0x58:['Australia','Airlora'],\n  0x5a:['World','Rai Way'],\n  0x5c:['World','Levikom'],\n  0x5e:['South Africa','Comsol Networks'],\n\n  0x60:['World','SoftBank'],\n  0x62:['World','Inmarsat'],\n  0x64:['World','Gemalto'],\n  0x66:['China','Alibaba Iot BU'],\n\n  0x68:['Russian Federation','ER-Telecom Holding'],\n  0x6a:['China','Shenzhen Tencent Computer Systems Company Limited'],\n  0x6c:['World','ShNetze BW GmbH'],\n  0x6e:['World','Tektelic'],\n  \n  0x70:['USA','Charter Communicaton']\n};\n\n// NetID Type 3, Type Prefix Length (MSB) = 4, Type Prefix Value (binary) = 1110, Number of NwkID bits = 10, Number of NwkAddr bits = 18\n// @ 20201105\n\nconst operators_e0 = {\n    0xe000:[\"RESERVED\",\"RESERVED\"],\n    0xe002:[\"Finland\",\"Digita\"],\n    0xe004:[\"Sweden, Norway\",\"Blink\"],\n    0xe006:[\"World\",\"QuaeNet Inc.\"],\n    0xe008:[\"North and South America\",\"eleven-x\"],\n    0xe00a:[\"World\",\"IoT Network AS\"],\n    0xe00c:[\"Asia, Middle East\",\"Senra Tech\"],\n    0xe00e:[\"World\",\"EDF\"],\n\n    0xe010:[\"Italy\",\"Unidata\"],\n    0xe012:[\"Scandinavia\",\"SEAS-NVE\"],\n    0xe014:[\"Scandinavia\",\"Öresundskraft\"],\n    0xe016:[\"Romania\",\"Ad Net Market Media\"],\n    0xe018:[\"Thailand\",\"CAT Telecom\"],\n    0xe01a:[\"World\",\"SenSys\"],\n    0xe01c:[\"World\",\"Spark\"],\n    0xe01e:[\"China\",\"ThingPark China\"],\n\n    0xe020:[\"World\",\"Senet\"],\n    0xe022:[\"Japan\",\"SenseWay\"],\n    0xe024:[\"Philippines\",\"Packetworx\"],\n    0xe026:[\"World\",\"Actility\"],\n    0xe028:[\"World\",\"Kerlink\"],\n    0xe02a:[\"China\",\"Alibaba IoT BU\"],\n    0xe02c:[\"World\",\"Cisco\"],\n    0xe02e:[\"World\",\"Schneider Electric\"],\n\n    0xe030:[\"World\",\"ZENNER\"],\n    0xe032:[\"Europe\",\"Boston Networks Limited\"],\n    0xe034:[\"Japan\",\"NEC Corporation\"],\n    0xe036:[\"China\",\"Shenzhen Tencent Computer Systems Company Limited\"],\n    0xe038:[\"World\",\"MachineQ/Comcast\"],\n    0xe03a:[\"Japan\",\"NTT (Nippon Telephone and Telegraph)\"],\n    0xe03c:[\"North America, South America\",\"Carnegie Technologies, LLC\"],\n    0xe03e:[\"Europe\",\"KPN\"],\n    \n    0xe030:[\"USA\",\"Spectrum\"],\n    0xe032:[\"World\",\"Microshare Inc.\"],\n    0xe034:[\"Germany\",\"Unitymedia\"],\n    0xe036:[\"World\",\"Paige Wireless\"],\n    0xe038:[\"World\",\"Netze BW GmbH\"],\n    0xe03a:[\"World\",\"Tektelic\"],\n    0xe03c:[\"World\",\"Acklio\"],\n    0xe03e:[\"World\",\"Birdz\"],\n    \n    0xe040:[\"USA\",\"Charter Communication\"]\n}\n\n// NetID Type 6, Type Prefix Length (MSB) = 7, Type Prefix Value (binary) = 1111110, Number of NwkID bits = 15, Number of NwkAddr bits = 10\n// @ 20201105\n\nconst operators_fc00 = {\n    0xfc0000:[\"RESERVED\",\"RESERVED\"],\n    0xfc0004:[\"World\",\"Nordic Automation Systems\"],\n    0xfc0008:[\"World\",\"ResIOT\"],\n    0xfc000c:[\"World\",\"SYSDEV\"],\n\n    0xfc0010:[\"China,Canada\",\"Appropolis\"],\n    0xfc0014:[\"Japan\",\"Macnica\"],\n    0xfc0018:[\"Sweden, Finland, Norway, Denmark\",\"IP-Only\"],\n    0xfc001c:[\"Russia Federation\",\"Thingenix LLC\"],\n\n    0xfc0020:[\"World\",\"Definium Technologies\"],\n    0xfc0024:[\"Germany ,only Darmstadt Region)\",\"ENTEGA AG\"],\n    0xfc0028:[\"Japan\",\"SenseWay\"],\n    0xfc002c:[\"Tunisia\",\"3S\"],\n\n    0xfc0030:[\"World\",\"nFore Technology\"],\n    0xfc0034:[\"Philippines\",\"Packetworx\"],\n    0xfc0038:[\"Sultanate Oman, Omani\",\"Qatari Telecommunications (Ooredoo)\"],\n    0xfc003c:[\"Hungary\",\"Antenna Hungaria Co\"],\n\n    0xfc0040:[\"Europe\",\"Trinity College, Dublin\"],\n    0xfc0044:[\"World\",\"Digital Nordix AB (DNX)\"],\n    0xfc0048:[\"Sweden, Norway\",\"Blink Services\"],\n    0xfc004c:[\"Norway\",\"Lyse AS\"],\n\n    0xfc0050:[\"Vietnam\",\"VTC Digicom\"],\n    0xfc0054:[\"Saudi Arabia\",\"Machines Talk\"],\n    0xfc0058:[\"World\",\"Schneider Electric\"],\n    0xfc005c:[\"UK\",\"Connexin\"],\n\n    0xfc0060:[\"World\",\"ZENNER\"],\n    0xfc0064:[\"Serbia\",\"Telekom Srbija\"],\n    0xfc0068:[\"World\",\"REQUEA\"],\n    0xfc006c:[\"Austria\",\"Sensor Network Services\"],\n\n    0xfc0070:[\"Europe\",\"Getraline\"],\n    0xfc0074:[\"Europe\",\"Boston Networks Limited\"],\n    0xfc0078:[\"Italy\",\"Telemar\"],\n    0xfc007c:[\"World\",\"mcf88 SRL\"],\n\n    0xfc0080:[\"Japan\",\"NEC Corporation\"],\n    0xfc0084:[\"World\",\"Hiber\"],\n    0xfc0088:[\"North America\",\"Milandr, Inc.\"],\n    0xfc008c:[\"Japan\",\"Green House Co., Ltd.\"],\n\n    0xfc0090:[\"Japan\",\"NTT (Nippon Telephone and Telegraph)\"],\n    0xfc0094:[\"India\",\"International Centre for Free and Open Source Software (ICFOSS)\"],\n    0xfc0098:[\"World\",\"Mirakonta\"],\n    0xfc009c:[\"Europe & Latin America\",\"Redexia\"],\n\n    0xfc00a0:[\"World\",\"Lacuna Space\"],\n    0xfc00a4:[\"Principality of Andorra\",\"Andorra Telecom\"],\n    0xfc00a8:[\"World\",\"Ursalink\"],\n    0xfc00ac:[\"France\",\"University Grenoble Alps CampusIoT\"],\n\n    0xfc00b0:[\"North America, South America\",\"Carnegie Technologies, LLC\"],\n    0xfc00b4:[\"Greece\",\"IoTech\"],\n    0xfc00b8:[\"USA\",\"Spectrum\"],\n    0xfc00bc:[\"France\",\"Afnic\"],\n\n    0xfc00c0:[\"South Africa, Europe,America\",\"Nerospec\"],\n    0xfc00c4:[\"India, ASEAN & SAARC Region\",\"Sehaj Synergy Technologies Pvt Ltd\"],\n    0xfc00c8:[\"World\",\"Microshare Inc.\"],\n    0xfc00cc:[\"Switzerland\",\"HEIG-VD\"],\n\n    0xfc00d0:[\"Germany\",\"Unitymedia\"],\n    0xfc00d4:[\"World\",\"Paige Wireless\"],\n    0xfc00d8:[\"Peru\",\"Desarrollo de Infraestructura de Telecomunicaciones Peru (Infratel Peru)\"],\n    0xfc00dc:[\"Italy\",\"Alperia Fiber\"],\n    \n    0xfc00e0:[\"Republic of Korea\",\"Unitymedia\"],\n    0xfc00e4:[\"World\",\"Acklio\"],\n    0xfc00e8:[\"World\",\"Vutiliti\"],\n    0xfc00ec:[\"Australia, New Zealand\",\"Meshed Pty Ltd\"],\n\n    0xfc00f0:[\"World\",\"Unitymedia\"],\n    0xfc00f4:[\"Asia Pacific\",\"Arthur D Riley & Co Ltd\"],\n    0xfc00f8:[\"Germany, Austria, Switzerland\",\"Komro GmbH\"],\n    0xfc00fc:[\"South Africa\",\"RSAWEB\"],\n\n    0xfc0100:[\"Czech Republic\",\"Ceske Radiokomunikace\"],\n    0xfc0104:[\"World\",\"CM Systems LLC\"],\n    0xfc0108:[\"Germany\",\"MIOT Melita.io Technology GmbH\"],\n    0xfc010c:[\"World\",\"PROESYS S.r.l.\"]\n\n};\n\n// ===================================\n\nfunction getOperator(devAddr) {\n    let entry;\n    let idx;\n    let operator;\n\n    if(((devAddr >> 16) & 0xffff) === 0xfc00) {\n      // NetID Type 6\n        idx = (((devAddr >> 10) << 2) & 0xffffff);\n        entry = operators_fc00[idx];\n        if(entry) {\n            operator = entry[1];\n        }\n    } else if(((devAddr >> 24) & 0xff) === 0xe0) {\n      // NetID Type 3\n        idx = (((devAddr >> 17) << 1) & 0xffff);\n        entry = operators_e0[idx];\n        if(entry) {\n          operator = entry[1];\n        }\n    } else {\n      // NetID Type 0\n        idx = (((devAddr >> 25) << 1) & 0xff);\n        entry = operators_0[idx];\n        if(entry) {\n          operator = entry[1];\n        }\n    }\n\n    if(operator === undefined) {\n      operator = \"Unknown \" + Number(idx).toString(16);\n    }\n    return operator;\n}\n\n\n// ============================\n// LoRaWAN Frames\n// ============================\nvar MHDR_JREQ = 0x00;\nvar MHDR_REJOIN = 0xC0;\nvar MHDR_DTUP = 0x40;\nvar MHDR_DCUP = 0x80;\n\nvar p = msg.payload;\n\nvar phyPayloadBuffer = p.phyPayloadBuffer;\n\n\nvar txInfo = p.txInfo;\n\nvar rxInfo = p.rxInfo;\nvar subband = getSubBandsEU868(txInfo.frequency);\nmsg.payload.rxInfo.subband = subband;\n\nmsg.payload.rxInfo.gatewayID = (Buffer.from(rxInfo.gatewayID,\"base64\")).toString('hex');\n\n\nvar dr = getLoRaWANDatarate(txInfo);\nrxInfo.dr = dr;\nvar toa = TimeOnAir.getLoRaWANTimeOnAir(phyPayloadBuffer.length, 0, dr)\nmsg.payload.rxInfo.toa = toa;\n\n\nif(phyPayloadBuffer){\n    var frametype = phyPayloadBuffer[0];\n    if(frametype === MHDR_JREQ || frametype === MHDR_REJOIN) {\n        msg.payload.frametype = (frametype === MHDR_JREQ) ? \"jreq\" : \"rejoin\";\n        msg.payload.appeui = phyPayloadBuffer.slice(1,9).swap64().toString(\"hex\");\n        msg.payload.deveui = phyPayloadBuffer.slice(9,17).swap64().toString(\"hex\");\n    } else if (frametype === MHDR_DTUP || frametype === MHDR_DCUP) {\n        msg.payload.frametype = \"dtup\";\n        var devaddr = phyPayloadBuffer.readUInt32LE(1);\n        msg.payload.devaddr = phyPayloadBuffer.slice(1,5).swap32().toString(\"hex\");\n        msg.payload.operator = getOperator(devaddr);\n        msg.payload.confirmed = (frametype === MHDR_DCUP);\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 240,
        "wires": [
            [
                "24df3277.6cb4ee",
                "ad00a010.971328"
            ]
        ]
    },
    {
        "id": "8b20689e.6f24f8",
        "type": "mqtt in",
        "z": "74429ff4.4ff848",
        "name": "Gateway Dn +",
        "topic": "gateway/+/event/dn",
        "qos": "2",
        "datatype": "auto",
        "broker": "f75893bf.fe0438",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "6203ad55.64e304"
            ]
        ]
    },
    {
        "id": "6203ad55.64e304",
        "type": "json",
        "z": "74429ff4.4ff848",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 370,
        "y": 360,
        "wires": [
            [
                "73a47132.43aad"
            ]
        ]
    },
    {
        "id": "ad00a010.971328",
        "type": "debug",
        "z": "74429ff4.4ff848",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 280,
        "wires": []
    },
    {
        "id": "cbebb845.774e68",
        "type": "json",
        "z": "176e4c9f.1fe43b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 490,
        "y": 240,
        "wires": [
            [
                "9925749c.2b32c"
            ]
        ]
    },
    {
        "id": "5a91beaa.681d28",
        "type": "link out",
        "z": "176e4c9f.1fe43b",
        "name": "application",
        "links": [
            "27a7d2a5.b405a6",
            "590961be.974788",
            "69db27cf.f9d1d8"
        ],
        "x": 1235,
        "y": 240,
        "wires": []
    },
    {
        "id": "a9ef9d47.882218",
        "type": "debug",
        "z": "176e4c9f.1fe43b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "x": 1210,
        "y": 320,
        "wires": []
    },
    {
        "id": "9be17ce9.a1dbc8",
        "type": "function",
        "z": "176e4c9f.1fe43b",
        "name": "add radio",
        "func": "\n\nfunction getSubBandsEU868(frequency) {\n    if(frequency>=863000000 && frequency<868000000) {\n        return \"g\";\n    } else if(frequency>=868000000 && frequency<868600000) {\n        return \"g1\";\n    } else if(frequency>=868700000 && frequency<869200000) {\n        return \"g2\";\n    } else if(frequency>=869400000 && frequency<869650000) {\n        return \"g3\";\n    } else if(frequency>=869700000 && frequency<870000000) {\n        return \"g4\";\n    } else {\n        return undefined;\n    }\n    /* Duty Cycle */\n    /*\n    g (863.0 – 868.0 MHz): 1%\n    g1 (868.0 – 868.6 MHz): 1%\n    g2 (868.7 – 869.2 MHz): 0.1%\n    g3 (869.4 – 869.65 MHz): 10%\n    g4 (869.7 – 870.0 MHz): 1%\n    */\n}\n\nvar p = msg.payload;\n\nvar rxInfo = p.rxInfo;\n\nvar ri = undefined;\n\nrxInfo.forEach(function(e) {\n  if(ri === undefined) {\n      ri = e;\n  } else if(e.rssi > ri.rssi) {\n      ri = e;\n  }\n});\n\nri.date = Date.now();\nri.dr = p.txInfo.dr;\nri.frequency = p.txInfo.frequency;\nri.subband = getSubBandsEU868(p.txInfo.frequency);\n// Can not compute timeonair without the frame length\n//ri.toa = TimeOnAir.getLoRaWANTimeOnAir(size, 0, ri.dr)\n\n\nri.redundancy = rxInfo.length;\n\nmsg.payload.radio = ri;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 240,
        "wires": [
            [
                "6b3b2577.b925bc"
            ]
        ]
    },
    {
        "id": "9925749c.2b32c",
        "type": "function",
        "z": "176e4c9f.1fe43b",
        "name": "convert frame payload",
        "func": "if(msg.payload.data){\n    msg.payload.frmPayload = Buffer.from(msg.payload.data, 'base64');\n    msg.payload.size = msg.payload.frmPayload.length;\n} else {\n    msg.payload.size = 0;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 745,
        "y": 240,
        "wires": [
            [
                "9be17ce9.a1dbc8"
            ]
        ]
    },
    {
        "id": "6b3b2577.b925bc",
        "type": "function",
        "z": "176e4c9f.1fe43b",
        "name": "add now",
        "func": "\nmsg.payload.time = new Date().getTime();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1120,
        "y": 240,
        "wires": [
            [
                "a9ef9d47.882218",
                "5a91beaa.681d28"
            ]
        ]
    },
    {
        "id": "15177116.48c4af",
        "type": "link in",
        "z": "176e4c9f.1fe43b",
        "name": "input4test",
        "links": [
            "ea3437b7.7160e",
            "2eb27a83.96f21e"
        ],
        "x": 515,
        "y": 100,
        "wires": [
            [
                "9925749c.2b32c"
            ]
        ]
    },
    {
        "id": "68326ab6.04ff14",
        "type": "mqtt in",
        "z": "176e4c9f.1fe43b",
        "name": "Devices",
        "topic": "application/+/device/+/rx",
        "qos": "2",
        "datatype": "auto",
        "broker": "f75893bf.fe0438",
        "x": 90,
        "y": 240,
        "wires": [
            [
                "cbebb845.774e68"
            ]
        ]
    },
    {
        "id": "4abf3eef.0a6388",
        "type": "link out",
        "z": "74429ff4.4ff848",
        "name": "gateway_dn",
        "links": [
            "9407cfb0.3e17b8"
        ],
        "x": 1135,
        "y": 360,
        "wires": []
    },
    {
        "id": "926ac0ea.4fcca",
        "type": "function",
        "z": "74429ff4.4ff848",
        "name": "TODO add time",
        "func": "// process \"timeSinceGPSEpoch\":\"1298122163.657s\"\n// process \"crcStatus\":\"CRC_OK\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "8148da84.dc11d",
        "type": "function",
        "z": "74429ff4.4ff848",
        "name": "TODO add location",
        "func": "// process \"timeSinceGPSEpoch\":\"1298122163.657s\"\n// process \"crcStatus\":\"CRC_OK\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 990,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ead4aa55.0969a8",
        "type": "function",
        "z": "8ef8462d.3e5728",
        "name": "TODO add lattitude,longitude",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "874de035.42a8d8",
        "type": "function",
        "z": "176e4c9f.1fe43b",
        "name": "TODO add distance",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 950,
        "y": 320,
        "wires": [
            []
        ]
    }
]